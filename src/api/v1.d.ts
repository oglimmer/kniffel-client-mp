/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/game/{arg0}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["post_player_names"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/game/{game_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_player_names"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/game/{game_id}/book": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["book"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/game/{game_id}/roll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["roll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BookRollRequest: {
            bookingType: string;
        };
        CreateGameRequest: {
            playerNames: string[];
        };
        DiceRollRequest: {
            diceToKeep: number[];
        };
        GameResponse: {
            availableBookingTypes: string[];
            currentPlayerName: string;
            diceRolls: number[];
            gameId: string;
            playerData: components["schemas"]["PlayerData"][];
            /** Format: int32 */
            rollRound: number;
            state: string;
            usedBookingTypes: string[];
        };
        PlayerData: {
            name: string;
            /** Format: int32 */
            score: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    post_player_names: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGameRequest"];
            };
        };
        responses: {
            /** @description Create a new game */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
        };
    };
    get_player_names: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                game_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a game */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
        };
    };
    book: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game id to score */
                game_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookRollRequest"];
            };
        };
        responses: {
            /** @description Book a dice roll to score */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
        };
    };
    roll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                game_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiceRollRequest"];
            };
        };
        responses: {
            /** @description (Re)-roll the dice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
        };
    };
}
