/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/game/{gameId}/roll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Re-roll the dice. Can only be called in gameState = ROLL */
        post: operations["roll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/game/{gameId}/book": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Book the current dice roll under a specific category. Can only be called in gameState = BOOK */
        post: operations["book"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/game/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new game with a specific number of players
         * @description The number of players must be at least 2. All player names must be different.
         */
        post: operations["createGame"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/game/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Provides all information for a game. Can be called at any point in time. */
        get: operations["getGameInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Game data model. Used for communication between client and server and returned by all endpoints */
        GameResponse: {
            /**
             * @description Secret game id
             * @example 1234567890
             */
            gameId: string;
            playerData: components["schemas"]["PlayerData"][];
            /**
             * @description player name whose turn it is
             * @example john doe
             */
            currentPlayerName: string;
            /**
             * @description current state of the turn. can either be ROLL or BOOK
             * @example BOOK
             * @enum {string}
             */
            state: "ROLL" | "BOOK";
            /**
             * @description all booking types already used by the current player
             * @example [
             *       "ONES",
             *       "TWOS"
             *     ]
             * @enum {array}
             */
            usedBookingTypes: "ONES" | "TWOS" | "THREES" | "FOURS" | "FIVES" | "SIXES" | "THREE_OF_A_KIND" | "FOUR_OF_A_KIND" | "FULL_HOUSE" | "SMALL_STRAIGHT" | "LARGE_STRAIGHT" | "CHANCE" | "KNIFFEL";
            /**
             * @description all booking types not used yet by the current player
             * @example [
             *       "ONES",
             *       "TWOS"
             *     ]
             * @enum {array}
             */
            availableBookingTypes: "ONES" | "TWOS" | "THREES" | "FOURS" | "FIVES" | "SIXES" | "THREE_OF_A_KIND" | "FOUR_OF_A_KIND" | "FULL_HOUSE" | "SMALL_STRAIGHT" | "LARGE_STRAIGHT" | "CHANCE" | "KNIFFEL";
            /**
             * @description dice values rolled by the current player. Always 5 elements. Values as 6 sided dice, thus from 1 to 6
             * @example [
             *       1,
             *       2,
             *       2,
             *       3,
             *       6
             *     ]
             */
            diceRolls: number[];
            /**
             * Format: int32
             * @description Indicated the round during the ROLL state. Can be 1 or 2 as after the 2nd round, the game moved automatically into state BOOK.
             * @example 1
             * @enum {integer}
             */
            rollRound: 1 | 2;
        };
        /** @description Player to score model */
        PlayerData: {
            /**
             * @description Player name. Given at game creation
             * @example john doe
             */
            name: string;
            /**
             * Format: int32
             * @description Current total score of the player
             * @example 30
             */
            score: number;
        };
        /** @description Re-roll dice request */
        DiceRollRequest: {
            /**
             * @description Dice to keep. Must be a subset of the current roll.
             * @example [
             *       1,
             *       2,
             *       3,
             *       4,
             *       5
             *     ]
             */
            diceToKeep?: number[];
        };
        /** @description Book rolls into category request */
        BookRollRequest: {
            /**
             * @description Booking type to book the current roll for. Must be one of the available booking types.
             * @example ONES
             * @enum {string}
             */
            bookingType?: "ONES" | "TWOS" | "THREES" | "FOURS" | "FIVES" | "SIXES" | "THREE_OF_A_KIND" | "FOUR_OF_A_KIND" | "FULL_HOUSE" | "SMALL_STRAIGHT" | "LARGE_STRAIGHT" | "CHANCE" | "KNIFFEL";
        };
        /** @description Game creation request */
        CreateGameRequest: {
            /**
             * @description Defines the participating players. Each player name must be different and at least 2 players have to be provided
             * @example [
             *       "john doe",
             *       "jane doe"
             *     ]
             */
            playerNames?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    roll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                gameId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiceRollRequest"];
            };
        };
        responses: {
            /** @description Dice rolled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
        };
    };
    book: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                gameId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookRollRequest"];
            };
        };
        responses: {
            /** @description Dice roll booked to category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
        };
    };
    createGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGameRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
        };
    };
    getGameInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                gameId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Game found and data returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
        };
    };
}
